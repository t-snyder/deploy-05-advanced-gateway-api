#!/bin/bash

# Step 7. Performs the following deployments and configurations:
#           a) Create a namespace for the nginx deployment
#           b) Create and configure a Vault Issuer and role for nginx certificate signing
#           c) Create a vault authorization role for the nginx issuer
#           d) Deploy cert-manager Service Account, Role and Rolebindings for the issuer
#           e) Deploy a cert-manager issuer configured to the vault nginx-issuer
#           f) Deploy a cert-manager certificate for nginx tls using vault nginx issuer
#           g) Deploy nginx gateway and app
#           h) Obtain nginx host, ports, and tls credentials
#           i) Test access via tls pssthru via the gateway to the nginx app listener.

# Create the nginx namespace
kubectl create namespace nginx

# Create mango-issuer role
kubectl exec -n vault vault-0 -i -- vault write pki_int/roles/nginx-issuer allowed_domains=nginx.example.com allow_subdomains=true allow_bare_domains=true allow_any_name=true max_ttl=48h key_type=ec key_bits=256

# Set the policy for the mango-issuer role
kubectl exec -n vault vault-0 -i -- vault policy write nginx-issuer - <<EOF
path "pki_int*"                     { capabilities = ["read", "list"] }
path "pki_int/roles/nginx-issuer"   { capabilities = ["create", "update"] }
path "pki_int/sign/nginx-issuer"    { capabilities = ["create", "update"] }
path "pki_int/issue/nginx-issuer"   { capabilities = ["create"] }
EOF

# Create an Authentication Role for the Nginx Issuer
kubectl exec -it vault-0 -n vault -- vault write auth/kubernetes/role/nginx-issuer \
    bound_service_account_names=nginx-issuer \
    bound_service_account_namespaces=nginx \
    audience="vault://nginx/nginx-issuer" \
    policies=nginx-issuer \
    ttl=20d

# Read the vault.ca into a variable for substitution into nginx-issuer.yaml
VAULT_CA=$(cat ${PROTODIR}/gen/crypto/vault.ca | base64 | tr -d '\n')
echo $VAULT_CA

# Deploy the cert-manager service account, role and role binding for the nginx-issuer
kubectl apply -f $PROTODIR/kube/nginx-issuer-sa-role.yaml

# Deploy the nginx issuer
kubectl apply -f- <<EOF
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: nginx-issuer
  namespace: nginx
spec:
  vault:
    path: pki_int/sign/nginx-issuer
    server: https://vault.vault.svc.cluster.local:8200
    caBundle: $VAULT_CA
    auth:
      kubernetes:
        role: nginx-issuer
        mountPath: /v1/auth/kubernetes
        serviceAccountRef:
          name: nginx-issuer
EOF

# Generate and sign the nginx cert
kubectl apply -f- <<EOF
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nginx-credential
  namespace: nginx 
spec:
  isCA: false
  privateKey:
    algorithm: ECDSA
    size: 256
  commonName: nginx.example.com
  dnsNames:
    - localhost
    - nginx
    - nginx.nginx.svc.cluster.local
    - nginx.example.com
  ipAddresses:
    - 127.0.0.1
  secretName: nginx-server-certs
  issuerRef:
    name: nginx-issuer
EOF

# Create a ConfigMp to hold the nginx conf
kubectl create configmap -n nginx nginx-configmap --from-file=nginx.conf=$PROTODIR/conf/nginx.conf

kubectl apply -f $PROTODIR/kube/nginx.yaml -n nginx

# Review and wait until Ready
kubectl get pods -n nginx

# Deploy nginx-gateway and route
kubectl apply -n nginx -f $PROTODIR/kube/nginx-gateway.yaml

# Check the status - wait until the Address is available and PROGRAMMED=True
kubectl get gateway -n nginx
kubectl wait --for=condition=programmed gtw nginx-gateway -n nginx

# Set nginx namespace to istio ambient mode (ie. no sidecar)
kubectl label namespace nginx istio.io/dataplane-mode=ambient

export NGINX_INGRESS_HOST=$(kubectl get gtw nginx-gateway -n nginx -o jsonpath='{.status.addresses[0].value}')
export NGINX_HTTP_PORT=$(kubectl    get gtw nginx-gateway -n nginx -o jsonpath='{.spec.listeners[?(@.name=="http")].port}')
export NGINX_HTTPS_PORT=$(kubectl   get gtw nginx-gateway -n nginx -o jsonpath='{.spec.listeners[?(@.name=="https")].port}')

echo "NGINX_INGRESS_HOST = $NGINX_INGRESS_HOST"
echo "NGINX_HTTP_PORT    = $NGINX_HTTP_PORT"
echo "NGINX_HTTPS_PORT   = $NGINX_HTTPS_PORT"

# Obtain nginx tls credential
kubectl get secret nginx-server-certs -n nginx -o "jsonpath={.data['ca\.crt']}" | base64 -d > $PROTODIR/gen/crypto/nginx-tls.crt

# Test https - Should return welcome page
curl -vt -HHost:nginx.example.com --resolve "nginx.example.com:$NGINX_HTTPS_PORT:$NGINX_INGRESS_HOST" \
  --cacert $PROTODIR/gen/crypto/nginx-tls.crt "https://nginx.example.com:$NGINX_HTTPS_PORT"




