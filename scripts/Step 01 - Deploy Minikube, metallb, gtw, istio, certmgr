#!/bin/bash

# Step 1 - Deploys and configures the following:
#            a) minikube, minikube addons (dashboard, metallb (Load Balancer));
#            b) configures load balancer ip address range

# This learning prototype was developed and tested using the following:
#   a) Ubuntu             - 20.04.6 LTS
#   b) Minikube           - 1.34.0
#   c) Kubernetes         - 1.31.0
#   d) Docker             - 27.2.0
#   d) Cert-manager       - 1.15.3
#   e) Istio              - 1.23.2
#   e) Hashicorp Vault    - 1,17.3
#   f) Kubernetes Gateway - 1.1.0
#   g) OpenSSL            - 3.4.0
#
# Laptop Machine configuration:
#     - Processor - Intel® Core™ i7-7700K CPU @ 4.20GHz × 8 
#       Memory    - 64 GB
#            
# Open terminal 1
# Delete prior minikube ( if used and configured prior)
minikube delete

# Start minikube - configure the settings to your requirements and hardware
# Note - normally I use kvm2 as the vm-driver. However istio cni in ambient mode does not
# currently work with kvm2 due to cni incompatibility. The work around is to use the 
# docker vm-driver.
minikube start --cpus 4 --memory 12288 --vm-driver docker --cni kindnet --disk-size 100g

# Addons
minikube addons enable dashboard

# Deploy the addon loadbalancer metallb
minikube addons enable metallb

# Configure loadbalancer ip address range within the same range as the minikube ip. The docker
# vm driver generates a minikube ip of 192.168.49.2 - other vm drivers such as kvm2 randomize
# the ip. The configuration is the starting ip range ( ie. 192.168.39.40 ) and an ending ip 
# that configures a range of 5 to 10 ip addresses. The range should not overlap the minikube
# ip address.
minikube ip
minikube addons configure metallb
## Example input
  -- Enter Load Balancer Start IP: 192.168.49.40
  -- Enter Load Balancer End IP:192.168.49.50
## End input

# Start dashboard
minikube dashboard

############## Open up a new (2nd) terminal ###################################
# Install the Kubernetes Gateway API CRDs (experimental also includes standard)
kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.1.0/experimental-install.yaml

# Install istio in ambient mode
istioctl install --set values.pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true --set profile=ambient --skip-confirmation

#### Install cert-manager with the following steps ####
# Create cert-manger namespace
kubectl create namespace cert-manager

# Deploy cert-manager gateway CRDs
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.crds.yaml

# Deploy cert-manager with gateway api enabled including the experimental gateway apis
helm install cert-manager --version 1.15 jetstack/cert-manager --namespace cert-manager \
  --set config.apiVersion="controller.config.cert-manager.io/v1alpha1" \
  --set config.kind="ControllerConfiguration" \
  --set config.enableGatewayAPI=true \
  --set "extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}"

# Next in Step 2 we need to setup the TLS configuration for Vault and deploy vault.

